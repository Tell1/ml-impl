<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <algorithm id="sequentialVBPSO" class="niching.NichingAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="0">
                <predicate class="stoppingcondition.Minimum"/>
                <measurement class="measurement.single.SwarmSize"/>
            </addStoppingCondition>

            <nicheCreator class="niching.creation.VectorBasedNicheCreationStrategy">
                <swarmBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </swarmBehavior>
                <swarmType class="pso.PSO">
                    <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="500"/>
                </swarmType>
            </nicheCreator>

            <nicheDetector class="niching.creation.NPerIterationNicheDetection">
                <n value="1"/>
            </nicheDetector>

            <subSwarmIterator class="niching.iterators.FirstSwarmIterator">
                <iterator class="niching.iterators.CompleteNicheIteration"/>
            </subSwarmIterator>

            <iterationStrategy class="niching.iterationstrategies.VectorBasedPSO"/>
        </algorithm>

        <algorithm id="parallelVBPSO" class="niching.NichingAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10">
                <predicate class="stoppingcondition.Maximum"/>
                <measurement class="measurement.generic.Iterations"/>
            </addStoppingCondition>

            <nicheCreator class="niching.creation.VectorBasedNicheCreationStrategy">
                <swarmBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </swarmBehavior>

                <swarmType class="pso.PSO">
                    <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
                </swarmType>
            </nicheCreator>

            <nicheDetector class="niching.creation.AlwaysTrueNicheDetection"/>

            <subSwarmIterator class="niching.iterators.MergingSubswarmIterator">
                <iterator class="niching.iterators.SingleNicheIteration"/>
                <granularity class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <iterations class="controlparameter.ConstantControlParameter" parameter="10"/>
            </subSwarmIterator>

            <iterationStrategy class="niching.iterationstrategies.VectorBasedPSO"/>
        </algorithm>

        <algorithm id="enhancedVBPSO" class="niching.NichingAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10">
                <predicate class="stoppingcondition.Maximum"/>
                <measurement class="measurement.generic.Iterations"/>
            </addStoppingCondition>

            <nicheCreator class="niching.creation.VectorBasedNicheCreationStrategy">
                <swarmBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.VectorBasedPositionProvider">
                        <granularity class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                    </positionProvider>
                </swarmBehavior>

                <swarmType class="pso.PSO">
                    <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
                </swarmType>
            </nicheCreator>

            <nicheDetector class="niching.creation.AlwaysTrueNicheDetection"/>

            <subSwarmIterator class="niching.iterators.MergingSubswarmIterator">
                <iterator class="niching.iterators.SingleNicheIteration"/>
                <granularity class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <iterations class="controlparameter.ConstantControlParameter" parameter="10"/>
            </subSwarmIterator>

            <iterationStrategy class="niching.iterationstrategies.VectorBasedPSO"/>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="f1" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
            <objective class="problem.objective.Maximise"/>
            <function class="functions.continuous.unconstrained.MultimodalFunction1"/>
        </problem>
        <problem id="f2" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
            <objective class="problem.objective.Maximise"/>
            <function class="functions.continuous.unconstrained.MultimodalFunction2"/>
        </problem>
        <problem id="f3" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
            <objective class="problem.objective.Maximise"/>
            <function class="functions.continuous.unconstrained.MultimodalFunction3"/>
        </problem>
        <problem id="f4" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
            <objective class="problem.objective.Maximise"/>
            <function class="functions.continuous.unconstrained.MultimodalFunction4"/>
        </problem>
        <problem id="f5" class="problem.FunctionOptimisationProblem" domain="R(-5.0:5.0)^2">
            <objective class="problem.objective.Maximise"/>
            <function class="functions.continuous.unconstrained.MultimodalFunction5"/>
        </problem>
    </problems>

    <measurements id="solution" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.FitnessEvaluations"/>
        <addMeasurement class="measurement.multiple.CompositeMeasurement">
            <addMeasurement class="measurement.single.SwarmSize"/>
            <addMeasurement class="measurement.single.Solution"/>
        </addMeasurement>
        <addMeasurement class="measurement.single.SwarmSize"/>
    </measurements>

    <simulations>
        <simulation samples="1">
            <algorithm idref="sequentialVBPSO"/>
            <problem idref="f1"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/sequentialVBPSO-f1.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="sequentialVBPSO"/>
            <problem idref="f2"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/sequentialVBPSO-f2.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="sequentialVBPSO"/>
            <problem idref="f3"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/sequentialVBPSO-f3.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="sequentialVBPSO"/>
            <problem idref="f4"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/sequentialVBPSO-f4.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="sequentialVBPSO"/>
            <problem idref="f5"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/sequentialVBPSO-f5.txt"/>
        </simulation>

        <simulation samples="1">
            <algorithm idref="parallelVBPSO"/>
            <problem idref="f1"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/parallelVBPSO-f1.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="parallelVBPSO"/>
            <problem idref="f2"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/parallelVBPSO-f2.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="parallelVBPSO"/>
            <problem idref="f3"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/parallelVBPSO-f3.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="parallelVBPSO"/>
            <problem idref="f4"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/parallelVBPSO-f4.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="parallelVBPSO"/>
            <problem idref="f5"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/parallelVBPSO-f5.txt"/>
        </simulation>

        <simulation samples="1">
            <algorithm idref="enhancedVBPSO"/>
            <problem idref="f1"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/enhancedVBPSO-f1.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="enhancedVBPSO"/>
            <problem idref="f2"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/enhancedVBPSO-f2.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="enhancedVBPSO"/>
            <problem idref="f3"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/enhancedVBPSO-f3.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="enhancedVBPSO"/>
            <problem idref="f4"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/enhancedVBPSO-f4.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="enhancedVBPSO"/>
            <problem idref="f5"/>
            <measurements idref="solution" />
            <output format="TXT" file="data/enhancedVBPSO-f5.txt"/>
        </simulation>
    </simulations>
</simulator>
