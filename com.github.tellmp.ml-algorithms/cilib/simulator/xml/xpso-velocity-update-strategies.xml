<?xml version="1.0"?>
<!DOCTYPE simulator
[
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <!--Crossover velocity provider PCX-->
        <algorithm id="xpso-pcx-velocity" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="pso.particle.StandardParticle">
                    <!--PBest cant be same as position for UNDX because of orthonormalize function-->
                    <personalBestInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">
                                <sigma1 class="controlparameter.ConstantControlParameter" parameter="1"/>
                                <sigma2 class="controlparameter.ConstantControlParameter" parameter="1"/>
                            </crossoverStrategy>
                        </velocityProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>

        <!--Crossover velocity provider PCX with Crossover pBest update-->
        <algorithm id="xpso-pcx-velocity-xover-pbest" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="pso.particle.StandardParticle">
                    <!--PBest cant be same as position for UNDX because of orthonormalize function-->
                    <personalBestInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">
                                <sigma1 class="controlparameter.ConstantControlParameter" parameter="1"/>
                                <sigma2 class="controlparameter.ConstantControlParameter" parameter="1"/>
                            </crossoverStrategy>
                        </velocityProvider>
                    </particleBehavior>
                    <personalBestUpdateStrategy class="pso.pbestupdate.DistinctPersonalBestUpdateStrategy">
                        <positionProvider class="pso.pbestupdate.CrossoverDistinctPositionProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy" />
                        </positionProvider>
                    </personalBestUpdateStrategy>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>

        <!--Crossover velocity provider PCX with Bounded Crossover pBest update-->
        <algorithm id="xpso-pcx-velocity-bounded-xover-pbest" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="pso.particle.StandardParticle">
                    <!--PBest cant be same as position for UNDX because of orthonormalize function-->
                    <personalBestInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">
                                <sigma1 class="controlparameter.ConstantControlParameter" parameter="1"/>
                                <sigma2 class="controlparameter.ConstantControlParameter" parameter="1"/>
                            </crossoverStrategy>
                        </velocityProvider>
                    </particleBehavior>
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy">
                        <delegate class="pso.pbestupdate.DistinctPersonalBestUpdateStrategy">
                            <positionProvider class="pso.pbestupdate.CrossoverDistinctPositionProvider">
                                <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy" />
                            </positionProvider>
                        </delegate>
                    </personalBestUpdateStrategy>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>

        <!-- Deb's alternative velocity update -->
        <algorithm id="xpso-pcx-velocity-alternative" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.DistinctCrossoverVelocityProvider">
                            <mainCrossover class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">
                                <parentProvider class="entity.operators.crossover.parentprovider.BestParentProvider"/>
                                <sigma1 class="controlparameter.ConstantControlParameter" parameter="0.17"/>
                                <sigma2 class="controlparameter.ConstantControlParameter" parameter="0.17"/>
                            </mainCrossover>
                            <alternateCrossover class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">
                                <sigma1 class="controlparameter.ConstantControlParameter" parameter="0.17"/>
                                <sigma2 class="controlparameter.ConstantControlParameter" parameter="0.0" />
                                <parentProvider class="entity.operators.crossover.parentprovider.BestParentProvider"/>
                            </alternateCrossover>
                        </velocityProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>

        <!--Crossover velocity provider PCX with Mutation pBest update-->
        <algorithm id="xpso-pcx-velocity-mutation-pbest" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="pso.particle.StandardParticle">
                    <!--PBest cant be same as position for UNDX because of orthonormalize function-->
                    <personalBestInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">
                                <sigma1 class="controlparameter.ConstantControlParameter" parameter="1"/>
                                <sigma2 class="controlparameter.ConstantControlParameter" parameter="1"/>
                            </crossoverStrategy>
                        </velocityProvider>
                    </particleBehavior>
                    <personalBestUpdateStrategy class="pso.pbestupdate.DistinctPersonalBestUpdateStrategy">
                        <positionProvider class="pso.pbestupdate.MutatedDistinctPositionProvider">
                            <distribution class="math.random.GaussianDistribution">
                                <deviation class="controlparameter.LinearlyVaryingControlParameter" initialValue="20" finalValue="0"/>
                            </distribution>
                        </positionProvider>
                    </personalBestUpdateStrategy>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>

        <!--Crossover velocity provider PCX with Bounded Mutation pBest update-->
        <algorithm id="xpso-pcx-velocity-bounded-mutation-pbest" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="pso.particle.StandardParticle">
                    <!--PBest cant be same as position for UNDX because of orthonormalize function-->
                    <personalBestInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">
                                <sigma1 class="controlparameter.ConstantControlParameter" parameter="1"/>
                                <sigma2 class="controlparameter.ConstantControlParameter" parameter="1"/>
                            </crossoverStrategy>
                        </velocityProvider>
                    </particleBehavior>
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy">
                        <delegate class="pso.pbestupdate.DistinctPersonalBestUpdateStrategy">
                            <positionProvider class="pso.pbestupdate.MutatedDistinctPositionProvider">
                                <distribution class="math.random.GaussianDistribution">
                                    <deviation class="controlparameter.LinearlyVaryingControlParameter" initialValue="20" finalValue="0"/>
                                </distribution>
                            </positionProvider>
                        </delegate>
                    </personalBestUpdateStrategy>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
    </algorithms>

    <problems>
        <problem id="griewank" class="problem.FunctionOptimisationProblem" domain="R(300:600)^30">
            <function class="functions.continuous.decorators.ShiftedFunctionDecorator">
                <function class="functions.continuous.unconstrained.Griewank" />
                <horizontalShift class="controlparameter.ConstantControlParameter" parameter="500" />
            </function>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="100">
        <addMeasurement class="measurement.single.Fitness" />
    </measurements>

    <simulations>
        <simulation samples="5">
            <algorithm idref="xpso-pcx-velocity" />
            <problem idref="griewank" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-griewank.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="xpso-pcx-velocity-alternative" />
            <problem idref="griewank" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-alternative-griewank.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="xpso-pcx-velocity-xover-pbest" />
            <problem idref="griewank" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-xover-pbest-griewank.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="xpso-pcx-velocity-bounded-xover-pbest" />
            <problem idref="griewank" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-bounded-xover-pbest-griewank.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="xpso-pcx-velocity-mutation-pbest" />
            <problem idref="griewank" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-mutation-pbest-griewank.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="xpso-pcx-velocity-bounded-mutation-pbest" />
            <problem idref="griewank" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-bounded-mutation-pbest-griewank.txt" />
        </simulation>
    </simulations>
</simulator>

