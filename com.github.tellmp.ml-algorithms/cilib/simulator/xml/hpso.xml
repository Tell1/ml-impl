<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <!-- Dynamic HPSO -->
        <algorithm id="dhpso" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>

            <initialisationStrategy class="algorithm.initialisation.HeterogeneousPopulationInitialisationStrategy">
                <entityNumber value="30"/>
                <entityType class="pso.particle.StandardParticle"/>

                <!-- initial behaviors -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.5"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.5" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>
                <!-- end initial behaviors -->
            </initialisationStrategy>

            <iterationStrategy class="pso.hpso.HPSOIterationStrategy">
                <!-- behavior pool -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.5"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.5" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>
                <!-- end behavior pool -->

                <windowSize class="controlparameter.ConstantControlParameter" parameter="1000"/>
                <selectionRecipe class="util.selection.recipes.RandomSelector"/>
            </iterationStrategy>
        </algorithm>

        <!-- Frequency-based HPSO Moving Window -->
        <algorithm id="fk-hpso-10" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>

            <initialisationStrategy class="algorithm.initialisation.HeterogeneousPopulationInitialisationStrategy">
                <delegate class="algorithm.initialisation.ChargedPopulationInitialisationStrategy">
                    <entityNumber value="30"/>
                    <entityType class="pso.dynamic.ChargedParticle"/>
                </delegate>

                <!-- initial behaviors -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end initial behaviors -->
            </initialisationStrategy>

            <iterationStrategy class="pso.hpso.HPSOIterationStrategy">
                <!-- behavior pool -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end behavior pool -->

                <windowSize class="controlparameter.ConstantControlParameter" parameter="10"/>
            </iterationStrategy>
        </algorithm>

        <!-- Difference Proportional Probability PSO -->
        <algorithm id="dpp-pso" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>

            <initialisationStrategy class="algorithm.initialisation.HeterogeneousPopulationInitialisationStrategy">
                <entityNumber value="30"/>
                <entityType class="pso.dynamic.ChargedParticle"/>

                <!-- initial behaviors -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.FIPSVelocityProvider"/>
                </addBehavior>
                <!-- end initial behaviors -->
            </initialisationStrategy>

            <iterationStrategy class="pso.hpso.DifferenceProportionalProbabilityIterationStrategy">
                <!-- behavior pool -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.FIPSVelocityProvider"/>
                </addBehavior>
                <!-- end behavior pool -->

                <rigidCountPerBehavior class="controlparameter.ConstantControlParameter" parameter="5"/>
            </iterationStrategy>
        </algorithm>

        <!-- Adaptive Learning PSO-ii -->
        <algorithm id="alpso-ii" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2500"/>

            <initialisationStrategy class="algorithm.initialisation.HeterogeneousPopulationInitialisationStrategy">
                <entityNumber value="10"/>
                <entityType class="pso.particle.StandardParticle"/>

                <!-- initial behaviors -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                        </delegate>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                            <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                        </delegate>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                            <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                        </delegate>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <globalGuideProvider class="pso.guideprovider.RandomGuideProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.RandomNearbyVelocityProvider"/>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>
                <!-- end initial behaviors -->
            </initialisationStrategy>

            <iterationStrategy class="pso.hpso.AdaptiveLearningIterationStrategy">
                <!-- behavior pool -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                        </delegate>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                            <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                        </delegate>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                            <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                        </delegate>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <globalGuideProvider class="pso.guideprovider.RandomGuideProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.RandomNearbyVelocityProvider"/>
                        <vMax class="controlparameter.DomainProportionalControlParameter" proportion="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>
                <!-- end behavior pool -->

                <q class="controlparameter.ConstantControlParameter" parameter="10"/>
                <minRatio class="controlparameter.ConstantControlParameter" parameter="0.01"/>
            </iterationStrategy>
        </algorithm>

        <!-- Pheromone based HPSO Constant Strategy -->
        <algorithm id="pher-const" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>

            <initialisationStrategy class="algorithm.initialisation.HeterogeneousPopulationInitialisationStrategy">
                <delegate class="algorithm.initialisation.ChargedPopulationInitialisationStrategy">
                    <entityNumber value="30"/>
                    <entityType class="pso.dynamic.ChargedParticle"/>
                </delegate>

                <!-- initial behaviors -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end initial behaviors -->
            </initialisationStrategy>

            <iterationStrategy class="pso.hpso.PheromoneIterationStrategy">
                <!-- behavior pool -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end behavior pool -->

                <pheromoneUpdateStrategy class="pso.hpso.pheromoneupdate.ConstantPheromoneUpdateStrategy">
                    <better class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    <same class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    <worse class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                </pheromoneUpdateStrategy>

                <detectionStrategy class="pso.hpso.detectionstrategies.PersonalBestStagnationDetectionStrategy">
                    <windowSize class="controlparameter.ConstantControlParameter" parameter="10.0"/>
                </detectionStrategy>
            </iterationStrategy>
        </algorithm>

        <!-- Pheromone based HPSO Linear Strategy -->
        <algorithm id="pher-lin" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>

            <initialisationStrategy class="algorithm.initialisation.HeterogeneousPopulationInitialisationStrategy">
                <delegate class="algorithm.initialisation.ChargedPopulationInitialisationStrategy">
                    <entityNumber value="30"/>
                    <entityType class="pso.dynamic.ChargedParticle"/>
                </delegate>

                <!-- initial behaviors -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end initial behaviors -->
            </initialisationStrategy>

            <iterationStrategy class="pso.hpso.PheromoneIterationStrategy">
                <!-- behavior pool -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end behavior pool -->

                <pheromoneUpdateStrategy class="pso.hpso.pheromoneupdate.LinearPheromoneUpdateStrategy">
                    <gradient class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                </pheromoneUpdateStrategy>

                <detectionStrategy class="pso.hpso.detectionstrategies.PersonalBestStagnationDetectionStrategy">
                    <windowSize class="controlparameter.ConstantControlParameter" parameter="10.0"/>
                </detectionStrategy>
            </iterationStrategy>
        </algorithm>

        <!-- Pheromone based HPSO Exponential Strategy -->
        <algorithm id="pher-exp" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>

            <initialisationStrategy class="algorithm.initialisation.HeterogeneousPopulationInitialisationStrategy">
                <delegate class="algorithm.initialisation.ChargedPopulationInitialisationStrategy">
                    <entityNumber value="30"/>
                    <entityType class="pso.dynamic.ChargedParticle"/>
                </delegate>

                <!-- initial behaviors -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end initial behaviors -->
            </initialisationStrategy>

            <iterationStrategy class="pso.hpso.PheromoneIterationStrategy">
                <!-- behavior pool -->
                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider"/>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="2.5" finalValue="0.0"/>
                        <socialAcceleration class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.0" finalValue="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                        <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                </addBehavior>

                <addBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider"/>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider"/>
                </addBehavior>
                <!-- end behavior pool -->

                <pheromoneUpdateStrategy class="pso.hpso.pheromoneupdate.ExponentialPheromoneUpdateStrategy">
                    <scale class="controlparameter.ConstantControlParameter" parameter="0.001"/>
                </pheromoneUpdateStrategy>

                <detectionStrategy class="pso.hpso.detectionstrategies.PersonalBestStagnationDetectionStrategy">
                    <windowSize class="controlparameter.ConstantControlParameter" parameter="10.0"/>
                </detectionStrategy>
            </iterationStrategy>
        </algorithm>
    </algorithms>

    <measurements id="measurements" class="simulator.MeasurementSuite" resolution="5">
        <addMeasurement class="measurement.single.Fitness"/>
        <addMeasurement class="measurement.single.FitnessEvaluations"/>
        <addMeasurement class="measurement.multiple.AdaptiveHPSOBehaviorProfileMeasurement"/>
    </measurements>

    <problems>
        <problem id="Rastrigin" class="problem.FunctionOptimisationProblem">
            <domain value="R(-5.12:5.12)^30"/>
            <function class="functions.continuous.unconstrained.Rastrigin"/>
        </problem>

        <simulation samples="5">
            <algorithm idref="dhpso"/>
            <problem idref="Rastrigin"/>
            <measurements idref="measurements"/>
             <output format="TXT" file="data/dhpso_Rastrigin_30_Dimensions.txt"/>
        </simulation>
        <simulation samples="5">
            <algorithm idref="fk-hpso-10"/>
            <problem idref="Rastrigin"/>
            <measurements idref="measurements"/>
            <output format="TXT" file="data/fk-hpso-10_Rastrigin_30_Dimensions.txt"/>
        </simulation>
        <simulation samples="5">
            <algorithm idref="dpp-pso"/>
            <problem idref="Rastrigin"/>
            <measurements idref="measurements"/>
            <output format="TXT" file="data/dpppso_Rastrigin_30_Dimensions.txt"/>
        </simulation>
        <simulation samples="5">
            <algorithm idref="alpso-ii"/>
            <problem idref="Rastrigin"/>
            <measurements idref="measurements"/>
            <output format="TXT" file="data/alpso-ii_Rastrigin_30_Dimensions.txt"/>
        </simulation>
        <simulation samples="5">
            <algorithm idref="pher-const"/>
            <problem idref="Rastrigin"/>
            <measurements idref="measurements"/>
            <output format="TXT" file="data/pher-const_Rastrigin_30_Dimensions.txt"/>
        </simulation>
        <simulation samples="5">
            <algorithm idref="pher-lin"/>
            <problem idref="Rastrigin"/>
            <measurements idref="measurements"/>
           <output format="TXT" file="data/pher-lin_Rastrigin_30_Dimensions.txt"/>
        </simulation>
        <simulation samples="5">
            <algorithm idref="pher-exp"/>
            <problem idref="Rastrigin"/>
            <measurements idref="measurements"/>
             <output format="TXT" file="data/pher-exp_Rastrigin_30_Dimensions.txt"/>
        </simulation>
    </problems>
</simulator>
