<?xml version="1.0"?>

<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>

<simulator>
    <algorithms>
        <algorithm id="gcpsoLB" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="20">
                <entityType class="pso.particle.StandardParticle">
                    <velocityInitialisationStrategy class="entity.initialisation.ConstantInitialisationStrategy" constant="0.0" />
                    <velocityProvider class="pso.velocityprovider.GCVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.729844" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.496180" />
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.496180" />
                        </delegate>
                    </velocityProvider>
                    <neighbourhoodBestUpdateStrategy class="pso.positionprovider.MemoryNeighbourhoodBestUpdateStrategy" />
                </entityType>
            </initialisationStrategy>
            <topology class="entity.topologies.LBestTopology">
                <neighbourhoodSize class="controlparameter.ConstantControlParameter" parameter="5" />
            </topology>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
        </algorithm>

        <algorithm id="gradientdecent" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.2" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.8" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="nn4-8-1-sig" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="../library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder" domain="R(-3:3)" />
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn4-8-1-lin" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="../library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder" domain="R(-3:3)" />
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.Fitness"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
    </measurements>

    <simulations>
        <simulation samples="2">
            <algorithm idref="gcpsoLB"/>
            <problem idref="nn4-8-1-sig"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/gbest_nn_iris_fitness.csv"/>
        </simulation>

        <simulation samples="2">
            <algorithm idref="gradientdecent"/>
            <problem idref="nn4-8-1-sig"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/gd_nn_iris_fitness.csv"/>
        </simulation>

        <simulation samples="2">
            <algorithm idref="gcpsoLB"/>
            <problem idref="nn4-8-1-lin"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/gbest_nn-lin_iris_fitness.csv"/>
        </simulation>

        <simulation samples="2">
            <algorithm idref="gradientdecent"/>
            <problem idref="nn4-8-1-lin"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/gd_nn-lin_iris_fitness.csv"/>
        </simulation>
    </simulations>
</simulator>
